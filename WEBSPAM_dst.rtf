{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww17360\viewh11940\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #Working version\
setwd("/Users/moitrayeechatterjee/Documents/Dempster-Shafer/DST in R/R_CodeDirectory")\
webspam_dataset <- read.table(file = "WEBSPAM-UK2007-SET1-raw-assessment1.txt", header = TRUE, sep = " ", stringsAsFactors = FALSE)\
webspam_resultset <- read.table(file = "WEBSPAM-UK2007-SET1-labels.txt", header = TRUE, sep = " ", stringsAsFactors = FALSE)\
require("dst")\
require("sqldf")\
resultlist <- list()\
exportresult <- exportresult <- data.frame(matrix(vector(),ncol=8)) \
names(exportresult) <- c("host","result_label","result_spamicity","dst_result","dst_spamicity","dst_conflict", "dst_spamicity_belief", "dst_spamicity_plausibility")\
webspam_dataset <- sqldf("select * from webspam_dataset where label !='-'")\
n <- c("nonspam","spam", "unknown", "borderline")\
uniqhost <- unique(unlist(webspam_dataset$host))\
for(i in uniqhost)\
\{	\
	#print(paste("Results for host: ", i))\
	#print("\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97")\
	#print("Result from function dsrwon: Dempster s rule before normalization for host")\
	xlist <- list()\
	xlist <- initsing(4,n)\
	rppml <- function(i)\
			\{\
				#xlist <- list()\
				uniqj <- unique(unlist(webspam_dataset$assessor [which(webspam_dataset$host == i)]))\
				for(j in uniqj) \
					\{\
					ma <- c ()\
					fx <- matrix(rbind(c(1,1,1,1)),ncol=4, byrow=TRUE)\
					subwebspam <- webspam_dataset[which(webspam_dataset$host == i & 								webspam_dataset$assessor ==j),]\
					ns_count <- (nrow(subset(subwebspam, label == 'nonspam')) / nrow(subwebspam))\
					s_count <- (nrow(subset(subwebspam, label == 'spam')) / nrow(subwebspam))\
					u_count <- (nrow(subset(subwebspam, label == 'unknown')) / nrow(subwebspam))\
					b_count <- (nrow(subset(subwebspam, label == 'borderline')) / nrow(subwebspam))\
					if (ns_count != 0)\
						\{\
\'a0 \'a0 \'a0 \'a0 \'a0 \'a0 					fx<- rbind(c(1,0,0,0),fx)\
						ma <- c(ma, ns_count)\
					#print(fx)\
					#print(ma)\
						\}\
					if ( s_count != 0)\
						\{\
						fx <- rbind(c(0,1,0,0),fx)\
						ma <- c(ma, s_count)\
					#print(fx)\
					#print(ma)\
						\}\
					if ( u_count != 0)\
						\{\
						fx <- rbind(c(0,0,1,0),fx)\
						ma<- c(ma, u_count)\
					#print(fx)\
					#print(ma)\
						\}			\
					if(b_count != 0)\
						\{\
						fx <- rbind(c(0,0,0,1),fx)\
						ma <- c(ma, b_count)\
					#print(fx)\
					#print(ma)\
						\}\
					ma <- c(ma,0)\
					x <- bca(ma,fx,n)\
		            		#xlist <- initsing(4,n)\
					xlist <-dsrwon(xlist, x)\
					#print(x)\
					#print(xlist)\
		          			names(xlist)[1] <- "DempsterRule"\
	           			\}\
				names(xlist)[1] <- "combination"\
				return (xlist)\
			\}\
	temp<-rppml(i)\
	resultlist<-append(resultlist,temp)\
	print(temp)\
	print("Result from function nzdsr: normalization")\
	resultlist<-append(resultlist, nzdsr(temp))\
	print(nzdsr(temp))\
	printresult <- nzdsr(temp)\
	aa <-which.max(printresult$DempsterRule[,1])\
	bb <- which(printresult$DempsterRule[aa,] == 1 & colnames(printresult$DempsterRule) != "mass" )\
	cc <- which.max(printresult$DempsterRule[,3])\
	bel <- belplau(nzdsr(temp)$DempsterRule)\
	hostnm <- i\
	res_lbl <- webspam_resultset$labels[which(webspam_resultset$host == i)]\
	res_spamicity <- webspam_resultset$value[which(webspam_resultset$host == i)]\
	dst_lbl <- colnames(printresult$DempsterRule)[bb]\
	dst_spamval <- printresult$DempsterRule[cc,1]\
   	dst_conflict <- printresult$con\
	dst_belief <-   bel[cc,1]\
	dst_plausibility <-  bel[cc,2]\
	#if (dst_spamval ! = "NaN")\
	exportresult <- rbind(exportresult, cbind(hostnm, res_lbl, res_spamicity, dst_lbl, dst_spamval, dst_conflict, dst_belief, dst_plausibility))\
          print( "Function belplau")\
	resultlist<-append(resultlist, belplau(nzdsr(temp)$DempsterRule))\
          print(belplau(nzdsr(temp)$DempsterRule))\
	resultlist<-append(resultlist, tabresul(nzdsr(temp)))\
          print("Function tabresul")\
          print(tabresul(nzdsr(temp)))\
	print(exportresult)\
	print(nzdsr(temp))\
	\
\}\
write.table(exportresult, file = "results.csv", sep = "\\t", row.names = FALSE)\
\
}